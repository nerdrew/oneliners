#!/usr/bin/env bash

set -eu -o pipefail

usage() {
  cat <<EOF
Usage: git fresh [BRANCH=origin/HEAD]

Fetch the target BRANCH, stash changes if necessary, and rebase on it.  If the
current branch matches \$GIT_PURGE_KEEP_BRANCHES, the don't rebase, only pull.
Prune merged branches after.
EOF

  exit "$1"
}

main() {
  local target current keep_branches stashed force
  local -a purge_keep_branches

  current=$(git rev-parse --abbrev-ref --verify HEAD)
  read -r -a purge_keep_branches <<< "master ${GIT_PURGE_KEEP_BRANCHES[*]:-}"
  keep_branches="$(printf "|%s" "${purge_keep_branches[@]}")"

  if [[ $# -eq 1 ]]; then
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
      usage 0
    fi
    target=$1
    force=1
  elif [[ $# -eq 0 ]]; then
    target=$(git rev-parse --verify --abbrev-ref --symbolic-full-name origin/HEAD 2>/dev/null || echo origin/master)
    if ! git config "branch.$current.remote" > /dev/null; then
      echo "Setting upstream branch: git branch --set-upstream-to=origin/$current" 1>&2
      git branch --set-upstream-to="origin/$current" || true
    fi
    force=""
  else
    usage 1
  fi

  if [[ "$target" == */* ]]; then
    git fetch --prune --prune-tags "${target%%/*}"
  else
    git fetch --prune --prune-tags
  fi

  # #| removes the leading "|"
  if [[ -z "$force" ]] && grep -qiE "${keep_branches#|}" <<< "$current" ; then
    echo "Skipping rebase of $current since it is blacklisted in GIT_PURGE_KEEP_BRANCHES='${purge_keep_branches[*]}'" 1>&2
    git pull
  else
    if ! git diff --quiet --ignore-submodules=dirty "$(git merge-base HEAD "${target}")..${target}"; then
      if ! git diff --quiet --ignore-submodules=dirty; then
        stashed=1
        git stash
      fi
      git rebase "${target}"
      if [[ -n "${stashed:-}" ]]; then
        git stash pop
      fi
    fi
  fi
  git-purge-merged-branches "${target}" || echo "Failed to delete some merged branches, continuing."
}

main "$@"
