#!/usr/bin/env bash

set -eu -o pipefail

usage() {
  cat <<EOF
Usage: git fresh [--force] [--rebase-abort] [--pull] [BRANCH=origin/HEAD]

Fetch the target BRANCH, stash changes if necessary, and rebase on it.  If the
current branch matches \$GIT_PURGE_KEEP_BRANCHES, the don't rebase, only pull.
Prune merged branches after.
EOF

  exit "$1"
}

main() {
  local \
    current \
    debug \
    force \
    keep_branch \
    keep_branches \
    local_sha \
    mergebase \
    meta_diff \
    rebase_abort \
    remote \
    remote_branch \
    remote_sha_after \
    remote_sha_before \
    stashed \

  local -a purge_keep_branches

  while (( $# )); do
    if [[ -z "$1" ]]; then
      break
    elif [[ "$1" == "--debug" ]]; then
      debug=--debug
      set -x
    elif [[ "$1" == "-h" || "$1" == "--help" ]]; then
      usage 0
    elif [[ "$1" == "-f" || "$1" == "--force" ]]; then
      force=1
    elif [[ "$1" == "--rebase-abort" ]]; then
      rebase_abort=1
    elif [[ "${1:0:1}" == "-" ]]; then
      echo "Unknown flag: ${1}" 1>&2
      usage 1
    elif [[ -z "${remote:-}" ]]; then
      remote=$1
    elif [[ -z "${remote_branch:-}" ]]; then
      remote_branch=$1
    else
      echo "Unknown argument: ${1}" 1>&2
      usage 1
    fi

    shift
  done

  current=$(git rev-parse --abbrev-ref --verify HEAD)
  local_sha=$(git rev-parse --verify HEAD)
  read -r -a purge_keep_branches <<< "main master ${GIT_PURGE_KEEP_BRANCHES[*]:-}"
  keep_branches="$(printf "|%s" "${purge_keep_branches[@]}")"
  if grep -qiE "${keep_branches#|}" <<< "$current"; then
    keep_branch=1
  fi

  if ! git config "branch.$current.remote" > /dev/null; then
    echo "Setting upstream branch: git branch --set-upstream-to=origin/$current" 1>&2
    git branch --set-upstream-to="origin/$current" || true
  fi

  if [[ -z "${remote:-}" ]]; then
    if ! remote=$(git rev-parse --quiet --verify --abbrev-ref --symbolic-full-name origin/HEAD); then
      git remote set-head origin -a
      remote=$(git rev-parse --quiet --verify --abbrev-ref --symbolic-full-name origin/HEAD)
    fi
  fi

  if [[ -z "${remote_branch:-}" ]]; then
    if [[ "${remote}" =~ "/" ]]; then
      remote_branch=${remote#*/}
      remote=${remote%%/*}
    else
      if ! remote_branch=$(git rev-parse --quiet --verify --abbrev-ref --symbolic-full-name "${remote}"); then
        git remote set-head "${remote}" -a
        remote_branch=$(git rev-parse --quiet --verify --abbrev-ref --symbolic-full-name "${remote}")
      fi
      remote_branch=${remote_branch#*/}
    fi
  fi

  remote_sha_before=$(git rev-parse --verify --quiet "origin/${current}") || true

  git fetch --recurse-submodules --prune origin

  if [[ "$remote" != origin ]]; then
    git fetch --recurse-submodules --prune "${remote}"
  fi

  if [[ -n "${remote_sha_before}" ]]; then
    remote_sha_after=$(git rev-parse --verify --quiet "origin/${current}")

    if [[ "${local_sha}" != "${remote_sha_after}" ]]; then
      if ! git diff --quiet --ignore-submodules=dirty; then
        echo "Stashing changes..." 1>&2
        stashed=1
        git stash
      fi
      if ! git merge --ff-only origin/"${current}" && [[ "${keep_branch:-}" != 1 ]]; then
        mergebase=$(git merge-base origin/master "${current}")

        if ~/dev/oneliners/bin/git-meta-diff ${debug:-} --quiet "${remote}/${current}"; then
          meta_diff=0
        else
          meta_diff=1
        fi

        if git merge-base --is-ancestor "${mergebase}" "origin/${current}" >/dev/null \
          && [[ "${local_sha}" == "${remote_sha_before}" || "${meta_diff}" == 0 ]]; then
          echo "git merge --ff-only failed but there are no unpushed changes, will git reset --hard origin/${current}" 1>&2
          echo "The sha before resetting=${current}" 1>&2
          git reset --hard "origin/${current}"
        elif [[ "${meta_diff}" == 1 ]]; then
          echo "There appear to be unknown changes on the remote of this branch, exiting" 1>&2
          if [[ "${stashed:-}" == "1" ]]; then
            echo "Restoring stashed changes..." 1>&2
            git stash pop
          fi
          exit 1
        fi
      fi
    fi
  fi

  if ! git diff --quiet --ignore-submodules=dirty "$(git merge-base HEAD "${remote}/${remote_branch}")..${remote}/${remote_branch}"; then
    if [[ "${force:-}" == "1" || "${keep_branch:-}" != 1 ]]; then
      if ! git diff --quiet --ignore-submodules=dirty; then
        stashed=1
        git stash
      fi

      if ! git rebase "${remote}/${remote_branch}" ; then
        if [[ "${rebase_abort:-}" == 1 ]]; then
          echo "Rebase failed, git rebase --abort -ing" 1>&2
          git rebase --abort
        elif [[ "${stashed:-}" == "1" ]]; then
          echo "Rebase failed, exiting, NOTE: CHANGES LEFT STASHED" 1>&2
          exit 1
        else
          echo "Rebase failed, exiting" 1>&2
          exit 1
        fi
      fi
    else
      echo "Skipping rebase of $current since it is blacklisted in GIT_PURGE_KEEP_BRANCHES='${purge_keep_branches[*]}'" 1>&2
    fi
  fi

  if [[ "${stashed:-}" == "1" ]]; then
    echo "Restoring stashed changes..." 1>&2
    git stash pop
  fi

  if [[ "$current" == "$remote_branch" ]]; then
    git-purge-merged-branches || echo "Failed to delete some merged branches, continuing." 1>&2
  fi
}

main "$@"
