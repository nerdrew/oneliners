#!/bin/bash

set -eu -o pipefail

usage() {
  echo "Usage: git fresh [<branch-to-rebase-on>]   (default branch=origin/master)"
}

main() {
  local target current keep_branches stashed
  local -a purge_keep_branches

  current=$(git rev-parse --abbrev-ref --verify HEAD)
  purge_keep_branches=(master ${GIT_PURGE_KEEP_BRANCHES:-})
  keep_branches="$(printf "|%s" "${purge_keep_branches[@]}")"

  if [[ $# -eq 1 ]]; then
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
      usage
      exit
    fi
    target=$1
  elif [[ $# -eq 0 ]]; then
    target=origin/master
    if ! git config "branch.$current.remote"; then
      echo "Setting upstream branch: git branch --set-upstream-to=origin/$current" 1>&2
      git branch --set-upstream-to="origin/$current"
    fi
  else
    usage
    exit 1
  fi

  if [[ "$target" == */* ]]; then
    git fetch --prune "${target%%/*}"
  else
    git fetch --prune
  fi

  # #| removes the leading "|"
  if grep -qiE "${keep_branches#|}" <<< "$current" ; then
    echo "Skipping rebase of $current since it is blacklisted in GIT_PURGE_KEEP_BRANCHES=$GIT_PURGE_KEEP_BRANCHES" 1>&2
    git pull ${target%%/*} ${target#*/}
    git-purge-merged-branches "${current}" || echo "Failed to delete some merged branches, continuing."
  else
    if ! git diff --quiet --ignore-submodules=dirty "$(git merge-base HEAD "${target}")..${target}"; then
      if ! git diff --quiet --ignore-submodules=dirty; then
        stashed=1
        git stash
      fi
      git rebase "${target}"
      if [[ -n "${stashed:-}" ]]; then
        git stash pop
      fi
    fi

    git-purge-merged-branches "${target}" || echo "Failed to delete some merged branches, continuing."
  fi
}

main "$@"
